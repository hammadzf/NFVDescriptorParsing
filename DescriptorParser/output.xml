<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1 (Python 3.8.10 on linux)" generated="20210917 11:48:46.887" rpa="false">
<suite id="s1" name="ParserTesting" source="/mnt/d/Work/NFV/SOL/descriptorParsing/NFVDescriptorParsing/DescriptorParser/ParserTesting.robot">
<test id="s1-t1" name="PARSE the descriptor file correctly">
<kw name="PARSE the Descriptor File">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${descriptorType}'=='SOL001'</arg>
<arg>Fetch Information from SOL001 descriptor file</arg>
<arg>ELSE</arg>
<arg>Fetch Information from SOL006 descriptor file</arg>
</arguments>
<kw name="Fetch Information from SOL001 descriptor file">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VDU_labels}</var>
</assign>
<msg timestamp="20210917 11:48:47.055" level="INFO">@{VDU_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.055" endtime="20210917 11:48:47.055"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VNF_labels}</var>
</assign>
<msg timestamp="20210917 11:48:47.056" level="INFO">@{VNF_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.056" endtime="20210917 11:48:47.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VirtualLink_labels}</var>
</assign>
<msg timestamp="20210917 11:48:47.056" level="INFO">@{VirtualLink_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.056" endtime="20210917 11:48:47.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{CP_labels}</var>
</assign>
<msg timestamp="20210917 11:48:47.056" level="INFO">@{CP_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.056" endtime="20210917 11:48:47.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{Storage_labels}</var>
</assign>
<msg timestamp="20210917 11:48:47.056" level="INFO">@{Storage_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.056" endtime="20210917 11:48:47.056"></status>
</kw>
<kw name="${key} IN [ @{node_types.keys()} ]" type="for">
<kw name="${key} = tst010.vnf.simple" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${node_types['${key}']['derived_from']}</arg>
</arguments>
<assign>
<var>${node_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.057" level="INFO">${node_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 11:48:47.057" endtime="20210917 11:48:47.057"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${is_VNF}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.058" endtime="20210917 11:48:47.058"></status>
</kw>
<msg timestamp="20210917 11:48:47.058" level="INFO">${is_VNF} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.058" endtime="20210917 11:48:47.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${is_VNF}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.059" level="INFO">${tosca_type_derived_from_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 11:48:47.059" endtime="20210917 11:48:47.059"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.058" endtime="20210917 11:48:47.059"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.057" endtime="20210917 11:48:47.059"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.057" endtime="20210917 11:48:47.060"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should not be empty</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<assign>
<var>${derived_type_is_used}</var>
</assign>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.060" level="INFO">Length is 17</msg>
<status status="PASS" starttime="20210917 11:48:47.060" endtime="20210917 11:48:47.060"></status>
</kw>
<msg timestamp="20210917 11:48:47.060" level="INFO">${derived_type_is_used} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.060" endtime="20210917 11:48:47.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${derived_type_is_used}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.061" level="INFO">${tosca_type_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 11:48:47.061" endtime="20210917 11:48:47.061"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.060" endtime="20210917 11:48:47.061"></status>
</kw>
<kw name="${key} IN [ @{topology_template.node_templates.keys()} ]" type="for">
<kw name="${key} = right" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.062" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 11:48:47.061" endtime="20210917 11:48:47.062"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.062" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 11:48:47.062" endtime="20210917 11:48:47.063"></status>
</kw>
<msg timestamp="20210917 11:48:47.063" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.062" endtime="20210917 11:48:47.063"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.065" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 11:48:47.064" endtime="20210917 11:48:47.065"></status>
</kw>
<msg timestamp="20210917 11:48:47.065" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.063" endtime="20210917 11:48:47.065"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.065" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.065" endtime="20210917 11:48:47.065"></status>
</kw>
<msg timestamp="20210917 11:48:47.066" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.065" endtime="20210917 11:48:47.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.066" endtime="20210917 11:48:47.066"></status>
</kw>
<msg timestamp="20210917 11:48:47.066" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.066" endtime="20210917 11:48:47.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.067" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 11:48:47.066" endtime="20210917 11:48:47.067"></status>
</kw>
<msg timestamp="20210917 11:48:47.067" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.066" endtime="20210917 11:48:47.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.067" endtime="20210917 11:48:47.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.067" endtime="20210917 11:48:47.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.068" endtime="20210917 11:48:47.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.068" endtime="20210917 11:48:47.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.068" endtime="20210917 11:48:47.069"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.068" endtime="20210917 11:48:47.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.069" endtime="20210917 11:48:47.069"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.061" endtime="20210917 11:48:47.069"></status>
</kw>
<kw name="${key} = management" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.070" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 11:48:47.069" endtime="20210917 11:48:47.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.070" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 11:48:47.070" endtime="20210917 11:48:47.070"></status>
</kw>
<msg timestamp="20210917 11:48:47.070" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.070" endtime="20210917 11:48:47.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.071" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 11:48:47.071" endtime="20210917 11:48:47.071"></status>
</kw>
<msg timestamp="20210917 11:48:47.071" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.071" endtime="20210917 11:48:47.071"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.073" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.072" endtime="20210917 11:48:47.073"></status>
</kw>
<msg timestamp="20210917 11:48:47.073" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.072" endtime="20210917 11:48:47.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.073" endtime="20210917 11:48:47.074"></status>
</kw>
<msg timestamp="20210917 11:48:47.074" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.073" endtime="20210917 11:48:47.074"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.074" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 11:48:47.074" endtime="20210917 11:48:47.074"></status>
</kw>
<msg timestamp="20210917 11:48:47.075" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.074" endtime="20210917 11:48:47.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.075" endtime="20210917 11:48:47.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.075" endtime="20210917 11:48:47.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.076" endtime="20210917 11:48:47.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.076" endtime="20210917 11:48:47.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.076" endtime="20210917 11:48:47.077"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.076" endtime="20210917 11:48:47.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.077" endtime="20210917 11:48:47.077"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.069" endtime="20210917 11:48:47.077"></status>
</kw>
<kw name="${key} = left" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.078" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 11:48:47.077" endtime="20210917 11:48:47.078"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.079" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 11:48:47.078" endtime="20210917 11:48:47.079"></status>
</kw>
<msg timestamp="20210917 11:48:47.079" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.078" endtime="20210917 11:48:47.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.080" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 11:48:47.080" endtime="20210917 11:48:47.080"></status>
</kw>
<msg timestamp="20210917 11:48:47.080" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.079" endtime="20210917 11:48:47.080"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.082" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.081" endtime="20210917 11:48:47.082"></status>
</kw>
<msg timestamp="20210917 11:48:47.082" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.080" endtime="20210917 11:48:47.082"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.082" endtime="20210917 11:48:47.083"></status>
</kw>
<msg timestamp="20210917 11:48:47.083" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.082" endtime="20210917 11:48:47.083"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.084" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 11:48:47.083" endtime="20210917 11:48:47.084"></status>
</kw>
<msg timestamp="20210917 11:48:47.084" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.083" endtime="20210917 11:48:47.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.084" endtime="20210917 11:48:47.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.084" endtime="20210917 11:48:47.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.084" endtime="20210917 11:48:47.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.085" endtime="20210917 11:48:47.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.085" endtime="20210917 11:48:47.085"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.085" endtime="20210917 11:48:47.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.085" endtime="20210917 11:48:47.086"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.077" endtime="20210917 11:48:47.086"></status>
</kw>
<kw name="${key} = vdu-b-1-vsd" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.086" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="PASS" starttime="20210917 11:48:47.086" endtime="20210917 11:48:47.086"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.087" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 11:48:47.087" endtime="20210917 11:48:47.087"></status>
</kw>
<msg timestamp="20210917 11:48:47.087" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.086" endtime="20210917 11:48:47.087"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.088" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 11:48:47.087" endtime="20210917 11:48:47.088"></status>
</kw>
<msg timestamp="20210917 11:48:47.088" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.087" endtime="20210917 11:48:47.088"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.088" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.088" endtime="20210917 11:48:47.088"></status>
</kw>
<msg timestamp="20210917 11:48:47.088" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.088" endtime="20210917 11:48:47.088"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.090" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 11:48:47.090" endtime="20210917 11:48:47.090"></status>
</kw>
<msg timestamp="20210917 11:48:47.090" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.089" endtime="20210917 11:48:47.090"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.091" endtime="20210917 11:48:47.091"></status>
</kw>
<msg timestamp="20210917 11:48:47.091" level="INFO">${Storage_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.090" endtime="20210917 11:48:47.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.092" endtime="20210917 11:48:47.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.092" endtime="20210917 11:48:47.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.092" endtime="20210917 11:48:47.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.093" endtime="20210917 11:48:47.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.093" endtime="20210917 11:48:47.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.094" endtime="20210917 11:48:47.094"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.093" endtime="20210917 11:48:47.094"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.086" endtime="20210917 11:48:47.094"></status>
</kw>
<kw name="${key} = VDU-B" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.095" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.Compute</msg>
<status status="PASS" starttime="20210917 11:48:47.094" endtime="20210917 11:48:47.095"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.095" endtime="20210917 11:48:47.096"></status>
</kw>
<msg timestamp="20210917 11:48:47.096" level="INFO">${VDU_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.095" endtime="20210917 11:48:47.096"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.096" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 11:48:47.096" endtime="20210917 11:48:47.096"></status>
</kw>
<msg timestamp="20210917 11:48:47.096" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.096" endtime="20210917 11:48:47.096"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.097" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.097" endtime="20210917 11:48:47.097"></status>
</kw>
<msg timestamp="20210917 11:48:47.097" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.097" endtime="20210917 11:48:47.097"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.098" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 11:48:47.097" endtime="20210917 11:48:47.098"></status>
</kw>
<msg timestamp="20210917 11:48:47.098" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.097" endtime="20210917 11:48:47.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.099" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 11:48:47.099" endtime="20210917 11:48:47.099"></status>
</kw>
<msg timestamp="20210917 11:48:47.099" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.099" endtime="20210917 11:48:47.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.100" endtime="20210917 11:48:47.100"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.100" endtime="20210917 11:48:47.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.100" endtime="20210917 11:48:47.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.100" endtime="20210917 11:48:47.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.101" endtime="20210917 11:48:47.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.101" endtime="20210917 11:48:47.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.101" endtime="20210917 11:48:47.101"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.094" endtime="20210917 11:48:47.101"></status>
</kw>
<kw name="${key} = vnf-b-1_VNF" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 11:48:47.102" level="INFO">${key_type} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 11:48:47.102" endtime="20210917 11:48:47.102"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.103" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 11:48:47.102" endtime="20210917 11:48:47.103"></status>
</kw>
<msg timestamp="20210917 11:48:47.103" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.102" endtime="20210917 11:48:47.103"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.103" endtime="20210917 11:48:47.104"></status>
</kw>
<msg timestamp="20210917 11:48:47.104" level="INFO">${VNF_check} = True</msg>
<status status="PASS" starttime="20210917 11:48:47.103" endtime="20210917 11:48:47.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.104" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 11:48:47.104" endtime="20210917 11:48:47.104"></status>
</kw>
<msg timestamp="20210917 11:48:47.104" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.104" endtime="20210917 11:48:47.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.105" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 11:48:47.105" endtime="20210917 11:48:47.105"></status>
</kw>
<msg timestamp="20210917 11:48:47.105" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.105" endtime="20210917 11:48:47.105"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.107" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 11:48:47.105" endtime="20210917 11:48:47.107"></status>
</kw>
<msg timestamp="20210917 11:48:47.107" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 11:48:47.105" endtime="20210917 11:48:47.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.107" endtime="20210917 11:48:47.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.108" endtime="20210917 11:48:47.108"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.107" endtime="20210917 11:48:47.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<kw name="Get VNF Attributes from SOL001">
<arguments>
<arg>${key}</arg>
</arguments>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_id}</arg>
</arguments>
<assign>
<var>${descriptor_id}</var>
</assign>
<msg timestamp="20210917 11:48:47.109" level="INFO">${descriptor_id} = VNF-B</msg>
<status status="PASS" starttime="20210917 11:48:47.109" endtime="20210917 11:48:47.109"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.provider}</arg>
</arguments>
<assign>
<var>${provider}</var>
</assign>
<msg timestamp="20210917 11:48:47.110" level="INFO">${provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 11:48:47.109" endtime="20210917 11:48:47.110"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.product_name}</arg>
</arguments>
<assign>
<var>${product_name}</var>
</assign>
<msg timestamp="20210917 11:48:47.111" level="INFO">${product_name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 11:48:47.110" endtime="20210917 11:48:47.111"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.software_version}</arg>
</arguments>
<assign>
<var>${software_version}</var>
</assign>
<msg timestamp="20210917 11:48:47.111" level="INFO">${software_version} = 2.0</msg>
<status status="PASS" starttime="20210917 11:48:47.111" endtime="20210917 11:48:47.111"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_version}</arg>
</arguments>
<assign>
<var>${descriptor_version}</var>
</assign>
<msg timestamp="20210917 11:48:47.112" level="INFO">${descriptor_version} = 2.0</msg>
<status status="PASS" starttime="20210917 11:48:47.111" endtime="20210917 11:48:47.112"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${descriptor_id}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.112" level="INFO">${Descriptor_ID} = VNF-B</msg>
<status status="PASS" starttime="20210917 11:48:47.112" endtime="20210917 11:48:47.112"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Provider}</arg>
<arg>${provider}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.112" level="INFO">${Provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 11:48:47.112" endtime="20210917 11:48:47.112"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${product_name}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.113" level="INFO">${Product_Name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 11:48:47.113" endtime="20210917 11:48:47.113"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${software_version}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.113" level="INFO">${Software_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 11:48:47.113" endtime="20210917 11:48:47.113"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_Version}</arg>
<arg>${descriptor_version}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.114" level="INFO">${Descriptor_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 11:48:47.113" endtime="20210917 11:48:47.114"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.108" endtime="20210917 11:48:47.114"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.108" endtime="20210917 11:48:47.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.114" endtime="20210917 11:48:47.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.114" endtime="20210917 11:48:47.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.114" endtime="20210917 11:48:47.115"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.101" endtime="20210917 11:48:47.115"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.061" endtime="20210917 11:48:47.115"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VDU_IDs}</arg>
<arg>@{VDU_labels}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.115" level="INFO">@{VDU_IDs} = [ VDU-B ]</msg>
<status status="PASS" starttime="20210917 11:48:47.115" endtime="20210917 11:48:47.115"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VNF_IDs}</arg>
<arg>@{VNF_labels}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.116" level="INFO">@{VNF_IDs} = [ vnf-b-1_VNF ]</msg>
<status status="PASS" starttime="20210917 11:48:47.115" endtime="20210917 11:48:47.116"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VirtualLink_IDs}</arg>
<arg>@{VirtualLink_labels}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.117" level="INFO">@{VirtualLink_IDs} = [ ]</msg>
<status status="PASS" starttime="20210917 11:48:47.116" endtime="20210917 11:48:47.117"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{CP_IDs}</arg>
<arg>@{CP_labels}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.117" level="INFO">@{CP_IDs} = [ right | management | left ]</msg>
<status status="PASS" starttime="20210917 11:48:47.117" endtime="20210917 11:48:47.117"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Storage_IDs}</arg>
<arg>@{Storage_labels}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.117" level="INFO">@{Storage_IDs} = [ vdu-b-1-vsd ]</msg>
<status status="PASS" starttime="20210917 11:48:47.117" endtime="20210917 11:48:47.118"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.055" endtime="20210917 11:48:47.118"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.054" endtime="20210917 11:48:47.118"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.054" endtime="20210917 11:48:47.118"></status>
</kw>
<doc>Test ID: 1.1.1
Test title: PARSE the descriptor file correctly
Test objective: The objective is to check if the SOL001 descriptor file is parsed correctly.
Pre-condition: SOL001 or SOL006 descriptor YAML file is available.
Post-condition: Values from the descriptor files are stored in suite variables.</doc>
<status status="PASS" starttime="20210917 11:48:47.053" endtime="20210917 11:48:47.118" critical="yes"></status>
</test>
<test id="s1-t2" name="Match the Response attributes with parsed data SOL006">
<kw name="Match the Response Attributes with Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_VNFId}</arg>
</arguments>
<msg timestamp="20210917 11:48:47.121" level="FAIL">VNF-B != VNF-B-2vdu</msg>
<status status="FAIL" starttime="20210917 11:48:47.120" endtime="20210917 11:48:47.121"></status>
</kw>
<status status="FAIL" starttime="20210917 11:48:47.119" endtime="20210917 11:48:47.121"></status>
</kw>
<doc>Test ID: 1.1.2
Test title: Match the Response attributes with parsed data SOL006
Test objective: The objective is to check if the Response body attributes match with the information in SOL006 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 11:48:47.118" endtime="20210917 11:48:47.121" critical="yes">VNF-B != VNF-B-2vdu</status>
</test>
<test id="s1-t3" name="Match the Response attributes with parsed data SOL001">
<kw name="Match the Response Attributes with Descriptors SOL001">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_vnfd_id_SOL1}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.123" endtime="20210917 11:48:47.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${Response_ProductNameS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.123" endtime="20210917 11:48:47.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${Response_SoftwareVersionS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.123" endtime="20210917 11:48:47.124"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${VDU_IDs}</arg>
<arg>${Response_vduIdS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.124" endtime="20210917 11:48:47.124"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${CP_IDs}</arg>
<arg>${Response_extCPS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.124" endtime="20210917 11:48:47.124"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${Storage_IDs}</arg>
<arg>${Response_StorageS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 11:48:47.124" endtime="20210917 11:48:47.125"></status>
</kw>
<status status="PASS" starttime="20210917 11:48:47.122" endtime="20210917 11:48:47.125"></status>
</kw>
<doc>Test ID: 1.1.3
Test title: Match the Response attributes with parsed data SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="PASS" starttime="20210917 11:48:47.122" endtime="20210917 11:48:47.125" critical="yes"></status>
</test>
<status status="FAIL" starttime="20210917 11:48:46.890" endtime="20210917 11:48:47.126"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="1" id="s1" name="ParserTesting">ParserTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
