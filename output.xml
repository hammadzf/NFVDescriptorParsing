<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1 (Python 3.9.6 on win32)" generated="20210917 10:04:19.254" rpa="false">
<suite id="s1" name="NFVDescriptorParsing" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing">
<suite id="s1-s1" name="DescriptorParser" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser">
<suite id="s1-s1-s1" name="NSDParserTesting" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser\NSDParserTesting.robot">
<test id="s1-s1-s1-t1" name="PARSE the NS descriptor file correctly">
<kw name="PARSE the NS Descriptor File">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${descriptorType}'=='SOL001'</arg>
<arg>Fetch Information from SOL001 NS descriptor file</arg>
<arg>ELSE</arg>
<arg>Fetch Information from SOL006 NS descriptor file</arg>
</arguments>
<kw name="Fetch Information from SOL001 NS descriptor file">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{NsVirtualLink_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.517" level="INFO">@{NsVirtualLink_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.517" endtime="20210917 10:04:19.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{NsCP_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.518" level="INFO">@{NsCP_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.518" endtime="20210917 10:04:19.518"></status>
</kw>
<kw name="${key} IN [ @{topology_template.node_templates.keys()} ]" type="for">
<kw name="${key} = VNF_A" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.520" level="INFO">${key_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:04:19.519" endtime="20210917 10:04:19.520"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.522" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.521" endtime="20210917 10:04:19.522"></status>
</kw>
<msg timestamp="20210917 10:04:19.522" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.520" endtime="20210917 10:04:19.523"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.523" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.523" endtime="20210917 10:04:19.523"></status>
</kw>
<msg timestamp="20210917 10:04:19.524" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.523" endtime="20210917 10:04:19.524"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.525" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.524" endtime="20210917 10:04:19.526"></status>
</kw>
<msg timestamp="20210917 10:04:19.526" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.524" endtime="20210917 10:04:19.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.526" endtime="20210917 10:04:19.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.527" endtime="20210917 10:04:19.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.527" endtime="20210917 10:04:19.528"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.519" endtime="20210917 10:04:19.528"></status>
</kw>
<kw name="${key} = VNF_B" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.529" level="INFO">${key_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:04:19.528" endtime="20210917 10:04:19.529"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.530" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.530" endtime="20210917 10:04:19.531"></status>
</kw>
<msg timestamp="20210917 10:04:19.531" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.530" endtime="20210917 10:04:19.531"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.533" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.532" endtime="20210917 10:04:19.533"></status>
</kw>
<msg timestamp="20210917 10:04:19.533" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.531" endtime="20210917 10:04:19.534"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.535" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.534" endtime="20210917 10:04:19.535"></status>
</kw>
<msg timestamp="20210917 10:04:19.536" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.534" endtime="20210917 10:04:19.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.536" endtime="20210917 10:04:19.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.537" endtime="20210917 10:04:19.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.538" endtime="20210917 10:04:19.538"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.528" endtime="20210917 10:04:19.538"></status>
</kw>
<kw name="${key} = NS_with_2_VNF" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.540" level="INFO">${key_type} = tosca.nodes.nfv.NS</msg>
<status status="PASS" starttime="20210917 10:04:19.539" endtime="20210917 10:04:19.540"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.541" endtime="20210917 10:04:19.542"></status>
</kw>
<msg timestamp="20210917 10:04:19.542" level="INFO">${NS_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.541" endtime="20210917 10:04:19.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.543" level="FAIL">tosca.nodes.nfv.NS != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.543" endtime="20210917 10:04:19.544"></status>
</kw>
<msg timestamp="20210917 10:04:19.544" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.543" endtime="20210917 10:04:19.544"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.546" level="FAIL">tosca.nodes.nfv.NS != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.545" endtime="20210917 10:04:19.546"></status>
</kw>
<msg timestamp="20210917 10:04:19.546" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.544" endtime="20210917 10:04:19.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<kw name="Get NS Attributes from SOL001">
<arguments>
<arg>${key}</arg>
</arguments>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.descriptorId}</arg>
</arguments>
<assign>
<var>${ns_descriptor_id}</var>
</assign>
<msg timestamp="20210917 10:04:19.548" level="INFO">${ns_descriptor_id} = NS with 2 VNFs</msg>
<status status="PASS" starttime="20210917 10:04:19.547" endtime="20210917 10:04:19.548"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.designer}</arg>
</arguments>
<assign>
<var>${designer}</var>
</assign>
<msg timestamp="20210917 10:04:19.549" level="INFO">${designer} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:04:19.548" endtime="20210917 10:04:19.549"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.version}</arg>
</arguments>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20210917 10:04:19.550" level="INFO">${version} = 1.0</msg>
<status status="PASS" starttime="20210917 10:04:19.549" endtime="20210917 10:04:19.550"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.name}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20210917 10:04:19.551" level="INFO">${name} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:04:19.550" endtime="20210917 10:04:19.551"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.invariantId}</arg>
</arguments>
<assign>
<var>${invariantId}</var>
</assign>
<msg timestamp="20210917 10:04:19.552" level="INFO">${invariantId} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:04:19.552" endtime="20210917 10:04:19.552"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_DescriptorID}</arg>
<arg>${ns_descriptor_id}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.553" level="INFO">${NS_DescriptorID} = NS with 2 VNFs</msg>
<status status="PASS" starttime="20210917 10:04:19.553" endtime="20210917 10:04:19.553"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Designer}</arg>
<arg>${designer}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.554" level="INFO">${Designer} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:04:19.553" endtime="20210917 10:04:19.554"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_Version}</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.555" level="INFO">${NS_Version} = 1.0</msg>
<status status="PASS" starttime="20210917 10:04:19.554" endtime="20210917 10:04:19.555"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_Name}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.556" level="INFO">${NS_Name} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:04:19.556" endtime="20210917 10:04:19.556"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_InvariantID}</arg>
<arg>${invariantId}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.557" level="INFO">${NS_InvariantID} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:04:19.556" endtime="20210917 10:04:19.557"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.547" endtime="20210917 10:04:19.557"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.546" endtime="20210917 10:04:19.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.558" endtime="20210917 10:04:19.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.558" endtime="20210917 10:04:19.558"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.539" endtime="20210917 10:04:19.559"></status>
</kw>
<kw name="${key} = vl_left" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.560" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:04:19.560" endtime="20210917 10:04:19.560"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.561" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.561" endtime="20210917 10:04:19.561"></status>
</kw>
<msg timestamp="20210917 10:04:19.562" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.561" endtime="20210917 10:04:19.562"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.562" endtime="20210917 10:04:19.563"></status>
</kw>
<msg timestamp="20210917 10:04:19.563" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.562" endtime="20210917 10:04:19.563"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.566" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.564" endtime="20210917 10:04:19.566"></status>
</kw>
<msg timestamp="20210917 10:04:19.566" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.564" endtime="20210917 10:04:19.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.567" endtime="20210917 10:04:19.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.568" endtime="20210917 10:04:19.568"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.567" endtime="20210917 10:04:19.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.570" endtime="20210917 10:04:19.571"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.560" endtime="20210917 10:04:19.571"></status>
</kw>
<kw name="${key} = vl_right" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.572" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:04:19.571" endtime="20210917 10:04:19.573"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.575" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.574" endtime="20210917 10:04:19.575"></status>
</kw>
<msg timestamp="20210917 10:04:19.576" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.573" endtime="20210917 10:04:19.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.576" endtime="20210917 10:04:19.577"></status>
</kw>
<msg timestamp="20210917 10:04:19.577" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.576" endtime="20210917 10:04:19.577"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.579" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.578" endtime="20210917 10:04:19.579"></status>
</kw>
<msg timestamp="20210917 10:04:19.579" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.578" endtime="20210917 10:04:19.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.580" endtime="20210917 10:04:19.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.581" endtime="20210917 10:04:19.582"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.580" endtime="20210917 10:04:19.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.583" endtime="20210917 10:04:19.583"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.571" endtime="20210917 10:04:19.583"></status>
</kw>
<kw name="${key} = vl_mgmt" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.584" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:04:19.584" endtime="20210917 10:04:19.585"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.587" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.586" endtime="20210917 10:04:19.588"></status>
</kw>
<msg timestamp="20210917 10:04:19.589" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.586" endtime="20210917 10:04:19.589"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.590" endtime="20210917 10:04:19.591"></status>
</kw>
<msg timestamp="20210917 10:04:19.591" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.590" endtime="20210917 10:04:19.592"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.594" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.593" endtime="20210917 10:04:19.594"></status>
</kw>
<msg timestamp="20210917 10:04:19.595" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.593" endtime="20210917 10:04:19.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.596" endtime="20210917 10:04:19.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.598" endtime="20210917 10:04:19.599"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.597" endtime="20210917 10:04:19.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.600" endtime="20210917 10:04:19.600"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.583" endtime="20210917 10:04:19.600"></status>
</kw>
<kw name="${key} = vl_data" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.602" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:04:19.602" endtime="20210917 10:04:19.602"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.605" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:04:19.604" endtime="20210917 10:04:19.606"></status>
</kw>
<msg timestamp="20210917 10:04:19.606" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.602" endtime="20210917 10:04:19.606"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.608" endtime="20210917 10:04:19.609"></status>
</kw>
<msg timestamp="20210917 10:04:19.610" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.607" endtime="20210917 10:04:19.610"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.611" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:04:19.610" endtime="20210917 10:04:19.611"></status>
</kw>
<msg timestamp="20210917 10:04:19.611" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.610" endtime="20210917 10:04:19.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.612" endtime="20210917 10:04:19.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.614" endtime="20210917 10:04:19.615"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.614" endtime="20210917 10:04:19.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.617" endtime="20210917 10:04:19.617"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.600" endtime="20210917 10:04:19.617"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.519" endtime="20210917 10:04:19.618"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{NS_VirtualLink_IDs}</arg>
<arg>@{NsVirtualLink_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.619" level="INFO">@{NS_VirtualLink_IDs} = [ vl_left | vl_right | vl_mgmt | vl_data ]</msg>
<status status="PASS" starttime="20210917 10:04:19.618" endtime="20210917 10:04:19.619"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{NsCP_IDs}</arg>
<arg>@{NsCP_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.622" level="INFO">@{NsCP_IDs} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.621" endtime="20210917 10:04:19.622"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.517" endtime="20210917 10:04:19.623"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.516" endtime="20210917 10:04:19.623"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.515" endtime="20210917 10:04:19.624"></status>
</kw>
<doc>Test ID: 1.2.1
Test title: PARSE the NS descriptor file correctly
Test objective: The objective is to check if the NS descriptor file is parsed correctly.
Pre-condition: SOL001 or SOL006 descriptor YAML file is available.
Post-condition: Values from the descriptor files are stored in suite variables.</doc>
<status status="PASS" starttime="20210917 10:04:19.515" endtime="20210917 10:04:19.624" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Match the Response attributes with parsed data NSD SOL001">
<kw name="Match the Response Attributes with NS Descriptors SOL001">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NSDescriptor_ID}</arg>
<arg>${Response_NSIdS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.626" endtime="20210917 10:04:19.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_Name}</arg>
<arg>${Response_NSnameS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.628" endtime="20210917 10:04:19.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_Version}</arg>
<arg>${Response_NsVersion}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.629" endtime="20210917 10:04:19.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_InvariantID}</arg>
<arg>${Response_NSInvariantIDS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.630" endtime="20210917 10:04:19.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Designer}</arg>
<arg>${Response_NSdesignerS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.631" endtime="20210917 10:04:19.631"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.626" endtime="20210917 10:04:19.632"></status>
</kw>
<doc>Test ID: 1.2.2
Test title: Match the Response attributes with parsed data NSD SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 NS descriptor file.
Pre-condition: Either SOL001 or SOL006 NS descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="PASS" starttime="20210917 10:04:19.625" endtime="20210917 10:04:19.632" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Match the Response attributes with parsed data NSD SOL006">
<kw name="Match the Response Attributes with NS Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NSDescriptor_ID}</arg>
<arg>${Response_NSIdSol6}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.636" level="FAIL">NS with 2 VNFs != tst010-nsd</msg>
<status status="FAIL" starttime="20210917 10:04:19.636" endtime="20210917 10:04:19.636"></status>
</kw>
<status status="FAIL" starttime="20210917 10:04:19.634" endtime="20210917 10:04:19.637"></status>
</kw>
<doc>Test ID: 1.2.3
Test title: Match the Response attributes with parsed data NSD SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 NS descriptor file.
Pre-condition: Either SOL001 or SOL006 NS descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:04:19.634" endtime="20210917 10:04:19.637" critical="yes">NS with 2 VNFs != tst010-nsd</status>
</test>
<test id="s1-s1-s1-t4" name="Match the Response attributes with parsed data SOL006">
<kw name="Match the Response Attributes with Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_VNFId}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.641" level="FAIL"> != VNF-B-2vdu</msg>
<status status="FAIL" starttime="20210917 10:04:19.640" endtime="20210917 10:04:19.641"></status>
</kw>
<status status="FAIL" starttime="20210917 10:04:19.639" endtime="20210917 10:04:19.642"></status>
</kw>
<doc>Test ID: 1.2.4
Test title: Match the Response attributes with parsed data SOL006
Test objective: The objective is to check if the Response body attributes match with the information in SOL006 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:04:19.637" endtime="20210917 10:04:19.642" critical="yes"> != VNF-B-2vdu</status>
</test>
<status status="FAIL" starttime="20210917 10:04:19.387" endtime="20210917 10:04:19.643"></status>
</suite>
<suite id="s1-s1-s2" name="ParserTesting" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser\ParserTesting.robot">
<test id="s1-s1-s2-t1" name="PARSE the descriptor file correctly">
<kw name="PARSE the Descriptor File">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${descriptorType}'=='SOL001'</arg>
<arg>Fetch Information from SOL001 descriptor file</arg>
<arg>ELSE</arg>
<arg>Fetch Information from SOL006 descriptor file</arg>
</arguments>
<kw name="Fetch Information from SOL001 descriptor file">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VDU_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.726" level="INFO">@{VDU_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.726" endtime="20210917 10:04:19.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VNF_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.728" level="INFO">@{VNF_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.727" endtime="20210917 10:04:19.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VirtualLink_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.728" level="INFO">@{VirtualLink_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.728" endtime="20210917 10:04:19.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{CP_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.730" level="INFO">@{CP_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.729" endtime="20210917 10:04:19.730"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{Storage_labels}</var>
</assign>
<msg timestamp="20210917 10:04:19.731" level="INFO">@{Storage_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.731" endtime="20210917 10:04:19.731"></status>
</kw>
<kw name="${key} IN [ @{node_types.keys()} ]" type="for">
<kw name="${key} = tst010.vnf.simple" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${node_types['${key}']['derived_from']}</arg>
</arguments>
<assign>
<var>${node_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.734" level="INFO">${node_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:04:19.733" endtime="20210917 10:04:19.734"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${is_VNF}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.735" endtime="20210917 10:04:19.735"></status>
</kw>
<msg timestamp="20210917 10:04:19.736" level="INFO">${is_VNF} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.735" endtime="20210917 10:04:19.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${is_VNF}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.738" level="INFO">${tosca_type_derived_from_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:04:19.737" endtime="20210917 10:04:19.738"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.736" endtime="20210917 10:04:19.739"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.732" endtime="20210917 10:04:19.739"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.731" endtime="20210917 10:04:19.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should not be empty</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<assign>
<var>${derived_type_is_used}</var>
</assign>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.741" level="INFO">Length is 17</msg>
<status status="PASS" starttime="20210917 10:04:19.740" endtime="20210917 10:04:19.741"></status>
</kw>
<msg timestamp="20210917 10:04:19.741" level="INFO">${derived_type_is_used} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.739" endtime="20210917 10:04:19.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${derived_type_is_used}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.743" level="INFO">${tosca_type_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:04:19.742" endtime="20210917 10:04:19.744"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.742" endtime="20210917 10:04:19.744"></status>
</kw>
<kw name="${key} IN [ @{topology_template.node_templates.keys()} ]" type="for">
<kw name="${key} = right" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.745" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:04:19.744" endtime="20210917 10:04:19.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.747" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:04:19.746" endtime="20210917 10:04:19.747"></status>
</kw>
<msg timestamp="20210917 10:04:19.748" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.746" endtime="20210917 10:04:19.748"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.750" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:04:19.748" endtime="20210917 10:04:19.750"></status>
</kw>
<msg timestamp="20210917 10:04:19.751" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.748" endtime="20210917 10:04:19.751"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.752" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.751" endtime="20210917 10:04:19.752"></status>
</kw>
<msg timestamp="20210917 10:04:19.753" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.751" endtime="20210917 10:04:19.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.754" endtime="20210917 10:04:19.755"></status>
</kw>
<msg timestamp="20210917 10:04:19.755" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.753" endtime="20210917 10:04:19.755"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.757" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:04:19.757" endtime="20210917 10:04:19.758"></status>
</kw>
<msg timestamp="20210917 10:04:19.758" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.756" endtime="20210917 10:04:19.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.759" endtime="20210917 10:04:19.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.760" endtime="20210917 10:04:19.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.761" endtime="20210917 10:04:19.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.762" endtime="20210917 10:04:19.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.764" endtime="20210917 10:04:19.765"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.763" endtime="20210917 10:04:19.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.765" endtime="20210917 10:04:19.766"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.744" endtime="20210917 10:04:19.766"></status>
</kw>
<kw name="${key} = management" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.767" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:04:19.767" endtime="20210917 10:04:19.767"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.769" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:04:19.768" endtime="20210917 10:04:19.769"></status>
</kw>
<msg timestamp="20210917 10:04:19.769" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.768" endtime="20210917 10:04:19.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.770" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:04:19.770" endtime="20210917 10:04:19.771"></status>
</kw>
<msg timestamp="20210917 10:04:19.771" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.769" endtime="20210917 10:04:19.771"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.773" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.772" endtime="20210917 10:04:19.773"></status>
</kw>
<msg timestamp="20210917 10:04:19.773" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.771" endtime="20210917 10:04:19.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.774" endtime="20210917 10:04:19.775"></status>
</kw>
<msg timestamp="20210917 10:04:19.775" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.774" endtime="20210917 10:04:19.775"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.777" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:04:19.776" endtime="20210917 10:04:19.777"></status>
</kw>
<msg timestamp="20210917 10:04:19.778" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.776" endtime="20210917 10:04:19.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.778" endtime="20210917 10:04:19.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.778" endtime="20210917 10:04:19.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.779" endtime="20210917 10:04:19.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.780" endtime="20210917 10:04:19.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.781" endtime="20210917 10:04:19.781"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.780" endtime="20210917 10:04:19.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.782" endtime="20210917 10:04:19.783"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.766" endtime="20210917 10:04:19.783"></status>
</kw>
<kw name="${key} = left" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.784" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:04:19.783" endtime="20210917 10:04:19.784"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.785" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:04:19.785" endtime="20210917 10:04:19.785"></status>
</kw>
<msg timestamp="20210917 10:04:19.786" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.785" endtime="20210917 10:04:19.786"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.787" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:04:19.786" endtime="20210917 10:04:19.787"></status>
</kw>
<msg timestamp="20210917 10:04:19.788" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.786" endtime="20210917 10:04:19.788"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.789" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.788" endtime="20210917 10:04:19.789"></status>
</kw>
<msg timestamp="20210917 10:04:19.789" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.788" endtime="20210917 10:04:19.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.790" endtime="20210917 10:04:19.791"></status>
</kw>
<msg timestamp="20210917 10:04:19.792" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.790" endtime="20210917 10:04:19.792"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.794" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:04:19.793" endtime="20210917 10:04:19.794"></status>
</kw>
<msg timestamp="20210917 10:04:19.794" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.792" endtime="20210917 10:04:19.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.794" endtime="20210917 10:04:19.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.795" endtime="20210917 10:04:19.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.796" endtime="20210917 10:04:19.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.797" endtime="20210917 10:04:19.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.798" endtime="20210917 10:04:19.799"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.798" endtime="20210917 10:04:19.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.800" endtime="20210917 10:04:19.800"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.783" endtime="20210917 10:04:19.800"></status>
</kw>
<kw name="${key} = vdu-b-1-vsd" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.801" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="PASS" starttime="20210917 10:04:19.801" endtime="20210917 10:04:19.801"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.803" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:04:19.802" endtime="20210917 10:04:19.803"></status>
</kw>
<msg timestamp="20210917 10:04:19.803" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.802" endtime="20210917 10:04:19.803"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.804" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:04:19.804" endtime="20210917 10:04:19.805"></status>
</kw>
<msg timestamp="20210917 10:04:19.805" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.803" endtime="20210917 10:04:19.805"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.806" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.806" endtime="20210917 10:04:19.806"></status>
</kw>
<msg timestamp="20210917 10:04:19.807" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.805" endtime="20210917 10:04:19.807"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.808" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:04:19.808" endtime="20210917 10:04:19.808"></status>
</kw>
<msg timestamp="20210917 10:04:19.809" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.807" endtime="20210917 10:04:19.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.809" endtime="20210917 10:04:19.810"></status>
</kw>
<msg timestamp="20210917 10:04:19.810" level="INFO">${Storage_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.809" endtime="20210917 10:04:19.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.811" endtime="20210917 10:04:19.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.812" endtime="20210917 10:04:19.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.812" endtime="20210917 10:04:19.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.813" endtime="20210917 10:04:19.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.813" endtime="20210917 10:04:19.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.815" endtime="20210917 10:04:19.816"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.814" endtime="20210917 10:04:19.817"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.801" endtime="20210917 10:04:19.817"></status>
</kw>
<kw name="${key} = VDU-B" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.819" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.Compute</msg>
<status status="PASS" starttime="20210917 10:04:19.818" endtime="20210917 10:04:19.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.820" endtime="20210917 10:04:19.820"></status>
</kw>
<msg timestamp="20210917 10:04:19.820" level="INFO">${VDU_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.820" endtime="20210917 10:04:19.820"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.822" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:04:19.821" endtime="20210917 10:04:19.822"></status>
</kw>
<msg timestamp="20210917 10:04:19.823" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.821" endtime="20210917 10:04:19.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.825" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.824" endtime="20210917 10:04:19.826"></status>
</kw>
<msg timestamp="20210917 10:04:19.826" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.824" endtime="20210917 10:04:19.826"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.828" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:04:19.827" endtime="20210917 10:04:19.828"></status>
</kw>
<msg timestamp="20210917 10:04:19.829" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.827" endtime="20210917 10:04:19.829"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.831" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:04:19.830" endtime="20210917 10:04:19.831"></status>
</kw>
<msg timestamp="20210917 10:04:19.831" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.829" endtime="20210917 10:04:19.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.832" endtime="20210917 10:04:19.833"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.832" endtime="20210917 10:04:19.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.833" endtime="20210917 10:04:19.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.834" endtime="20210917 10:04:19.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.835" endtime="20210917 10:04:19.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.835" endtime="20210917 10:04:19.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.836" endtime="20210917 10:04:19.837"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.817" endtime="20210917 10:04:19.837"></status>
</kw>
<kw name="${key} = vnf-b-1_VNF" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:04:19.839" level="INFO">${key_type} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:04:19.838" endtime="20210917 10:04:19.839"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.841" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:04:19.840" endtime="20210917 10:04:19.841"></status>
</kw>
<msg timestamp="20210917 10:04:19.841" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.840" endtime="20210917 10:04:19.841"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.843" endtime="20210917 10:04:19.844"></status>
</kw>
<msg timestamp="20210917 10:04:19.844" level="INFO">${VNF_check} = True</msg>
<status status="PASS" starttime="20210917 10:04:19.842" endtime="20210917 10:04:19.844"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.846" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:04:19.845" endtime="20210917 10:04:19.846"></status>
</kw>
<msg timestamp="20210917 10:04:19.847" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.845" endtime="20210917 10:04:19.847"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.848" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:04:19.847" endtime="20210917 10:04:19.849"></status>
</kw>
<msg timestamp="20210917 10:04:19.849" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.847" endtime="20210917 10:04:19.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.851" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:04:19.850" endtime="20210917 10:04:19.851"></status>
</kw>
<msg timestamp="20210917 10:04:19.851" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:04:19.850" endtime="20210917 10:04:19.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.851" endtime="20210917 10:04:19.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.853" endtime="20210917 10:04:19.853"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.852" endtime="20210917 10:04:19.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<kw name="Get VNF Attributes from SOL001">
<arguments>
<arg>${key}</arg>
</arguments>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_id}</arg>
</arguments>
<assign>
<var>${descriptor_id}</var>
</assign>
<msg timestamp="20210917 10:04:19.856" level="INFO">${descriptor_id} = VNF-B</msg>
<status status="PASS" starttime="20210917 10:04:19.855" endtime="20210917 10:04:19.856"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.provider}</arg>
</arguments>
<assign>
<var>${provider}</var>
</assign>
<msg timestamp="20210917 10:04:19.857" level="INFO">${provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:04:19.856" endtime="20210917 10:04:19.857"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.product_name}</arg>
</arguments>
<assign>
<var>${product_name}</var>
</assign>
<msg timestamp="20210917 10:04:19.858" level="INFO">${product_name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 10:04:19.858" endtime="20210917 10:04:19.858"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.software_version}</arg>
</arguments>
<assign>
<var>${software_version}</var>
</assign>
<msg timestamp="20210917 10:04:19.860" level="INFO">${software_version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:04:19.859" endtime="20210917 10:04:19.860"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_version}</arg>
</arguments>
<assign>
<var>${descriptor_version}</var>
</assign>
<msg timestamp="20210917 10:04:19.861" level="INFO">${descriptor_version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:04:19.860" endtime="20210917 10:04:19.861"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${descriptor_id}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.862" level="INFO">${Descriptor_ID} = VNF-B</msg>
<status status="PASS" starttime="20210917 10:04:19.861" endtime="20210917 10:04:19.862"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Provider}</arg>
<arg>${provider}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.863" level="INFO">${Provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:04:19.862" endtime="20210917 10:04:19.863"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${product_name}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.865" level="INFO">${Product_Name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 10:04:19.864" endtime="20210917 10:04:19.865"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${software_version}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.867" level="INFO">${Software_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:04:19.866" endtime="20210917 10:04:19.867"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_Version}</arg>
<arg>${descriptor_version}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.868" level="INFO">${Descriptor_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:04:19.867" endtime="20210917 10:04:19.868"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.854" endtime="20210917 10:04:19.869"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.854" endtime="20210917 10:04:19.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.869" endtime="20210917 10:04:19.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.870" endtime="20210917 10:04:19.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.871" endtime="20210917 10:04:19.871"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.838" endtime="20210917 10:04:19.871"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.744" endtime="20210917 10:04:19.871"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VDU_IDs}</arg>
<arg>@{VDU_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.872" level="INFO">@{VDU_IDs} = [ VDU-B ]</msg>
<status status="PASS" starttime="20210917 10:04:19.871" endtime="20210917 10:04:19.872"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VNF_IDs}</arg>
<arg>@{VNF_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.873" level="INFO">@{VNF_IDs} = [ vnf-b-1_VNF ]</msg>
<status status="PASS" starttime="20210917 10:04:19.873" endtime="20210917 10:04:19.874"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VirtualLink_IDs}</arg>
<arg>@{VirtualLink_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.874" level="INFO">@{VirtualLink_IDs} = [ ]</msg>
<status status="PASS" starttime="20210917 10:04:19.874" endtime="20210917 10:04:19.875"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{CP_IDs}</arg>
<arg>@{CP_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.875" level="INFO">@{CP_IDs} = [ right | management | left ]</msg>
<status status="PASS" starttime="20210917 10:04:19.875" endtime="20210917 10:04:19.876"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Storage_IDs}</arg>
<arg>@{Storage_labels}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.876" level="INFO">@{Storage_IDs} = [ vdu-b-1-vsd ]</msg>
<status status="PASS" starttime="20210917 10:04:19.876" endtime="20210917 10:04:19.877"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.725" endtime="20210917 10:04:19.877"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.724" endtime="20210917 10:04:19.877"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.724" endtime="20210917 10:04:19.877"></status>
</kw>
<doc>Test ID: 1.1.1
Test title: PARSE the descriptor file correctly
Test objective: The objective is to check if the SOL001 descriptor file is parsed correctly.
Pre-condition: SOL001 or SOL006 descriptor YAML file is available.
Post-condition: Values from the descriptor files are stored in suite variables.</doc>
<status status="PASS" starttime="20210917 10:04:19.723" endtime="20210917 10:04:19.878" critical="yes"></status>
</test>
<test id="s1-s1-s2-t2" name="Match the Response attributes with parsed data SOL006">
<kw name="Match the Response Attributes with Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_VNFId}</arg>
</arguments>
<msg timestamp="20210917 10:04:19.882" level="FAIL">VNF-B != VNF-B-2vdu</msg>
<status status="FAIL" starttime="20210917 10:04:19.880" endtime="20210917 10:04:19.882"></status>
</kw>
<status status="FAIL" starttime="20210917 10:04:19.879" endtime="20210917 10:04:19.883"></status>
</kw>
<doc>Test ID: 1.1.2
Test title: Match the Response attributes with parsed data SOL006
Test objective: The objective is to check if the Response body attributes match with the information in SOL006 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:04:19.878" endtime="20210917 10:04:19.883" critical="yes">VNF-B != VNF-B-2vdu</status>
</test>
<test id="s1-s1-s2-t3" name="Match the Response attributes with parsed data SOL001">
<kw name="Match the Response Attributes with Descriptors SOL001">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_vnfd_id_SOL1}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.886" endtime="20210917 10:04:19.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${Response_ProductNameS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.886" endtime="20210917 10:04:19.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${Response_SoftwareVersionS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.887" endtime="20210917 10:04:19.888"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${VDU_IDs}</arg>
<arg>${Response_vduIdS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.888" endtime="20210917 10:04:19.888"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${CP_IDs}</arg>
<arg>${Response_extCPS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.888" endtime="20210917 10:04:19.889"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${Storage_IDs}</arg>
<arg>${Response_StorageS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:04:19.889" endtime="20210917 10:04:19.890"></status>
</kw>
<status status="PASS" starttime="20210917 10:04:19.885" endtime="20210917 10:04:19.890"></status>
</kw>
<doc>Test ID: 1.1.3
Test title: Match the Response attributes with parsed data SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="PASS" starttime="20210917 10:04:19.884" endtime="20210917 10:04:19.891" critical="yes"></status>
</test>
<status status="FAIL" starttime="20210917 10:04:19.645" endtime="20210917 10:04:19.891"></status>
</suite>
<status status="FAIL" starttime="20210917 10:04:19.384" endtime="20210917 10:04:19.893"></status>
</suite>
<status status="FAIL" starttime="20210917 10:04:19.341" endtime="20210917 10:04:19.895"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="3">Critical Tests</stat>
<stat pass="4" fail="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="4" fail="3" id="s1" name="NFVDescriptorParsing">NFVDescriptorParsing</stat>
<stat pass="4" fail="3" id="s1-s1" name="DescriptorParser">NFVDescriptorParsing.DescriptorParser</stat>
<stat pass="2" fail="2" id="s1-s1-s1" name="NSDParserTesting">NFVDescriptorParsing.DescriptorParser.NSDParserTesting</stat>
<stat pass="2" fail="1" id="s1-s1-s2" name="ParserTesting">NFVDescriptorParsing.DescriptorParser.ParserTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
