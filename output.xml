<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1 (Python 3.9.6 on win32)" generated="20210917 10:16:01.406" rpa="false">
<suite id="s1" name="NFVDescriptorParsing" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing">
<suite id="s1-s1" name="DescriptorParser" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser">
<suite id="s1-s1-s1" name="NSDParserTesting" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser\NSDParserTesting.robot">
<test id="s1-s1-s1-t1" name="PARSE the NS descriptor file correctly">
<kw name="PARSE the NS Descriptor File">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${descriptorType}'=='SOL001'</arg>
<arg>Fetch Information from SOL001 NS descriptor file</arg>
<arg>ELSE</arg>
<arg>Fetch Information from SOL006 NS descriptor file</arg>
</arguments>
<kw name="Fetch Information from SOL001 NS descriptor file">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{NsVirtualLink_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.747" level="INFO">@{NsVirtualLink_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.747" endtime="20210917 10:16:01.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{NsCP_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.748" level="INFO">@{NsCP_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.748" endtime="20210917 10:16:01.749"></status>
</kw>
<kw name="${key} IN [ @{topology_template.node_templates.keys()} ]" type="for">
<kw name="${key} = VNF_A" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.752" level="INFO">${key_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:16:01.750" endtime="20210917 10:16:01.752"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.754" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.753" endtime="20210917 10:16:01.754"></status>
</kw>
<msg timestamp="20210917 10:16:01.755" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.752" endtime="20210917 10:16:01.755"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.756" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:01.756" endtime="20210917 10:16:01.757"></status>
</kw>
<msg timestamp="20210917 10:16:01.757" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.755" endtime="20210917 10:16:01.757"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.759" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.758" endtime="20210917 10:16:01.759"></status>
</kw>
<msg timestamp="20210917 10:16:01.759" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.757" endtime="20210917 10:16:01.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.761" endtime="20210917 10:16:01.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.762" endtime="20210917 10:16:01.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.763" endtime="20210917 10:16:01.763"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.750" endtime="20210917 10:16:01.764"></status>
</kw>
<kw name="${key} = VNF_B" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.765" level="INFO">${key_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:16:01.764" endtime="20210917 10:16:01.765"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.767" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.766" endtime="20210917 10:16:01.767"></status>
</kw>
<msg timestamp="20210917 10:16:01.768" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.766" endtime="20210917 10:16:01.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.775" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:01.769" endtime="20210917 10:16:01.775"></status>
</kw>
<msg timestamp="20210917 10:16:01.775" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.768" endtime="20210917 10:16:01.776"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.778" level="FAIL">tosca.nodes.nfv.VNF != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.777" endtime="20210917 10:16:01.778"></status>
</kw>
<msg timestamp="20210917 10:16:01.779" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.776" endtime="20210917 10:16:01.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.779" endtime="20210917 10:16:01.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.780" endtime="20210917 10:16:01.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.781" endtime="20210917 10:16:01.782"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.764" endtime="20210917 10:16:01.782"></status>
</kw>
<kw name="${key} = NS_with_2_VNF" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.783" level="INFO">${key_type} = tosca.nodes.nfv.NS</msg>
<status status="PASS" starttime="20210917 10:16:01.782" endtime="20210917 10:16:01.783"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.785" endtime="20210917 10:16:01.785"></status>
</kw>
<msg timestamp="20210917 10:16:01.785" level="INFO">${NS_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.783" endtime="20210917 10:16:01.785"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.787" level="FAIL">tosca.nodes.nfv.NS != tosca.nodes.nfv.NsVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:01.786" endtime="20210917 10:16:01.787"></status>
</kw>
<msg timestamp="20210917 10:16:01.787" level="INFO">${NSLink_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.785" endtime="20210917 10:16:01.787"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.789" level="FAIL">tosca.nodes.nfv.NS != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.788" endtime="20210917 10:16:01.789"></status>
</kw>
<msg timestamp="20210917 10:16:01.789" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.787" endtime="20210917 10:16:01.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<kw name="Get NS Attributes from SOL001">
<arguments>
<arg>${key}</arg>
</arguments>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.descriptorId}</arg>
</arguments>
<assign>
<var>${ns_descriptor_id}</var>
</assign>
<msg timestamp="20210917 10:16:01.791" level="INFO">${ns_descriptor_id} = NS with 2 VNFs</msg>
<status status="PASS" starttime="20210917 10:16:01.791" endtime="20210917 10:16:01.792"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.designer}</arg>
</arguments>
<assign>
<var>${designer}</var>
</assign>
<msg timestamp="20210917 10:16:01.795" level="INFO">${designer} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:16:01.792" endtime="20210917 10:16:01.795"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.version}</arg>
</arguments>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20210917 10:16:01.796" level="INFO">${version} = 1.0</msg>
<status status="PASS" starttime="20210917 10:16:01.795" endtime="20210917 10:16:01.797"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.name}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20210917 10:16:01.798" level="INFO">${name} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:16:01.798" endtime="20210917 10:16:01.798"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${NS_label}.properties.invariantId}</arg>
</arguments>
<assign>
<var>${invariantId}</var>
</assign>
<msg timestamp="20210917 10:16:01.799" level="INFO">${invariantId} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:16:01.799" endtime="20210917 10:16:01.799"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_DescriptorID}</arg>
<arg>${ns_descriptor_id}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.800" level="INFO">${NS_DescriptorID} = NS with 2 VNFs</msg>
<status status="PASS" starttime="20210917 10:16:01.800" endtime="20210917 10:16:01.800"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Designer}</arg>
<arg>${designer}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.801" level="INFO">${Designer} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:16:01.801" endtime="20210917 10:16:01.801"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_Version}</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.802" level="INFO">${NS_Version} = 1.0</msg>
<status status="PASS" starttime="20210917 10:16:01.802" endtime="20210917 10:16:01.803"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_Name}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.804" level="INFO">${NS_Name} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:16:01.803" endtime="20210917 10:16:01.804"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${NS_InvariantID}</arg>
<arg>${invariantId}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.805" level="INFO">${NS_InvariantID} = ns_with_2_vnfs</msg>
<status status="PASS" starttime="20210917 10:16:01.805" endtime="20210917 10:16:01.805"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.791" endtime="20210917 10:16:01.805"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.789" endtime="20210917 10:16:01.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.806" endtime="20210917 10:16:01.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.806" endtime="20210917 10:16:01.807"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.782" endtime="20210917 10:16:01.807"></status>
</kw>
<kw name="${key} = vl_left" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.809" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:16:01.808" endtime="20210917 10:16:01.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.811" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.810" endtime="20210917 10:16:01.811"></status>
</kw>
<msg timestamp="20210917 10:16:01.811" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.810" endtime="20210917 10:16:01.811"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.812" endtime="20210917 10:16:01.813"></status>
</kw>
<msg timestamp="20210917 10:16:01.813" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.811" endtime="20210917 10:16:01.813"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.814" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.813" endtime="20210917 10:16:01.814"></status>
</kw>
<msg timestamp="20210917 10:16:01.814" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.813" endtime="20210917 10:16:01.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.815" endtime="20210917 10:16:01.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.816" endtime="20210917 10:16:01.816"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.815" endtime="20210917 10:16:01.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.817" endtime="20210917 10:16:01.817"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.808" endtime="20210917 10:16:01.817"></status>
</kw>
<kw name="${key} = vl_right" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.819" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:16:01.818" endtime="20210917 10:16:01.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.820" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.820" endtime="20210917 10:16:01.820"></status>
</kw>
<msg timestamp="20210917 10:16:01.820" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.820" endtime="20210917 10:16:01.821"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.821" endtime="20210917 10:16:01.823"></status>
</kw>
<msg timestamp="20210917 10:16:01.823" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.821" endtime="20210917 10:16:01.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.825" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.824" endtime="20210917 10:16:01.825"></status>
</kw>
<msg timestamp="20210917 10:16:01.825" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.823" endtime="20210917 10:16:01.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.826" endtime="20210917 10:16:01.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.828" endtime="20210917 10:16:01.828"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.828" endtime="20210917 10:16:01.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.829" endtime="20210917 10:16:01.830"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.818" endtime="20210917 10:16:01.830"></status>
</kw>
<kw name="${key} = vl_mgmt" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.830" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:16:01.830" endtime="20210917 10:16:01.830"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.831" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.831" endtime="20210917 10:16:01.832"></status>
</kw>
<msg timestamp="20210917 10:16:01.833" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.831" endtime="20210917 10:16:01.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.833" endtime="20210917 10:16:01.833"></status>
</kw>
<msg timestamp="20210917 10:16:01.834" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.833" endtime="20210917 10:16:01.834"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.835" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.835" endtime="20210917 10:16:01.835"></status>
</kw>
<msg timestamp="20210917 10:16:01.836" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.834" endtime="20210917 10:16:01.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.836" endtime="20210917 10:16:01.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.838" endtime="20210917 10:16:01.839"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.837" endtime="20210917 10:16:01.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.840" endtime="20210917 10:16:01.840"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.830" endtime="20210917 10:16:01.841"></status>
</kw>
<kw name="${key} = vl_data" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates.${key}.type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.843" level="INFO">${key_type} = tosca.nodes.nfv.NsVirtualLink</msg>
<status status="PASS" starttime="20210917 10:16:01.842" endtime="20210917 10:16:01.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<assign>
<var>${NS_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NS}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.845" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.NS</msg>
<status status="FAIL" starttime="20210917 10:16:01.844" endtime="20210917 10:16:01.845"></status>
</kw>
<msg timestamp="20210917 10:16:01.846" level="INFO">${NS_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.844" endtime="20210917 10:16:01.846"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<assign>
<var>${NSLink_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsVirtualLink}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.848" endtime="20210917 10:16:01.848"></status>
</kw>
<msg timestamp="20210917 10:16:01.849" level="INFO">${NSLink_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.846" endtime="20210917 10:16:01.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<assign>
<var>${NsCP_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_NsCP}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.850" level="FAIL">tosca.nodes.nfv.NsVirtualLink != tosca.nodes.nfv.Cp</msg>
<status status="FAIL" starttime="20210917 10:16:01.849" endtime="20210917 10:16:01.850"></status>
</kw>
<msg timestamp="20210917 10:16:01.851" level="INFO">${NsCP_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.849" endtime="20210917 10:16:01.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NS_check}</arg>
<arg>Get NS Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.851" endtime="20210917 10:16:01.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NSLink_check}</arg>
<arg>Append To List</arg>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Ns_VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.852" endtime="20210917 10:16:01.853"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.852" endtime="20210917 10:16:01.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${NsCP_check}</arg>
<arg>Append To List</arg>
<arg>${NsCp_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.855" endtime="20210917 10:16:01.855"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.842" endtime="20210917 10:16:01.855"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.749" endtime="20210917 10:16:01.855"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{NS_VirtualLink_IDs}</arg>
<arg>@{NsVirtualLink_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.856" level="INFO">@{NS_VirtualLink_IDs} = [ vl_left | vl_right | vl_mgmt | vl_data ]</msg>
<status status="PASS" starttime="20210917 10:16:01.856" endtime="20210917 10:16:01.856"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{NsCP_IDs}</arg>
<arg>@{NsCP_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.858" level="INFO">@{NsCP_IDs} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.857" endtime="20210917 10:16:01.859"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.745" endtime="20210917 10:16:01.859"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.744" endtime="20210917 10:16:01.859"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.743" endtime="20210917 10:16:01.860"></status>
</kw>
<doc>Test ID: 1.2.1
Test title: PARSE the NS descriptor file correctly
Test objective: The objective is to check if the NS descriptor file is parsed correctly.
Pre-condition: SOL001 or SOL006 descriptor YAML file is available.
Post-condition: Values from the descriptor files are stored in suite variables.</doc>
<status status="PASS" starttime="20210917 10:16:01.742" endtime="20210917 10:16:01.860" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Match the Response attributes with parsed data NSD SOL001">
<kw name="Match the Response Attributes with NS Descriptors SOL001">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NSDescriptor_ID}</arg>
<arg>${Response_NSIdS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.864" endtime="20210917 10:16:01.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_Name}</arg>
<arg>${Response_NSnameS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.866" endtime="20210917 10:16:01.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_Version}</arg>
<arg>${Response_NsVersion}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.868" endtime="20210917 10:16:01.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NS_InvariantID}</arg>
<arg>${Response_NSInvariantIDS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.869" endtime="20210917 10:16:01.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Designer}</arg>
<arg>${Response_NSdesignerS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.872" endtime="20210917 10:16:01.872"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.863" endtime="20210917 10:16:01.872"></status>
</kw>
<doc>Test ID: 1.2.2
Test title: Match the Response attributes with parsed data NSD SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 NS descriptor file.
Pre-condition: Either SOL001 or SOL006 NS descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="PASS" starttime="20210917 10:16:01.861" endtime="20210917 10:16:01.872" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Match the Response attributes with parsed data NSD SOL006">
<kw name="Match the Response Attributes with NS Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${NSDescriptor_ID}</arg>
<arg>${Response_NSIdSol6}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.876" level="FAIL">NS with 2 VNFs != tst010-nsd</msg>
<status status="FAIL" starttime="20210917 10:16:01.875" endtime="20210917 10:16:01.876"></status>
</kw>
<status status="FAIL" starttime="20210917 10:16:01.873" endtime="20210917 10:16:01.876"></status>
</kw>
<doc>Test ID: 1.2.3
Test title: Match the Response attributes with parsed data NSD SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 NS descriptor file.
Pre-condition: Either SOL001 or SOL006 NS descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:16:01.873" endtime="20210917 10:16:01.877" critical="yes">NS with 2 VNFs != tst010-nsd</status>
</test>
<test id="s1-s1-s1-t4" name="Match the Response attributes with parsed data SOL006">
<kw name="Match the Response Attributes with Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_VNFId}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.879" level="FAIL"> != VNF-B-2vdu</msg>
<status status="FAIL" starttime="20210917 10:16:01.879" endtime="20210917 10:16:01.879"></status>
</kw>
<status status="FAIL" starttime="20210917 10:16:01.878" endtime="20210917 10:16:01.881"></status>
</kw>
<doc>Test ID: 1.2.4
Test title: Match the Response attributes with parsed data SOL006
Test objective: The objective is to check if the Response body attributes match with the information in SOL006 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:16:01.877" endtime="20210917 10:16:01.881" critical="yes"> != VNF-B-2vdu</status>
</test>
<status status="FAIL" starttime="20210917 10:16:01.582" endtime="20210917 10:16:01.881"></status>
</suite>
<suite id="s1-s1-s2" name="ParserTesting" source="D:\Work\NFV\SOL\descriptorparsing code\NFVDescriptorParsing\DescriptorParser\ParserTesting.robot">
<test id="s1-s1-s2-t1" name="PARSE the descriptor file correctly">
<kw name="PARSE the Descriptor File">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${descriptorType}'=='SOL001'</arg>
<arg>Fetch Information from SOL001 descriptor file</arg>
<arg>ELSE</arg>
<arg>Fetch Information from SOL006 descriptor file</arg>
</arguments>
<kw name="Fetch Information from SOL001 descriptor file">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VDU_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.961" level="INFO">@{VDU_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.961" endtime="20210917 10:16:01.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VNF_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.963" level="INFO">@{VNF_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.962" endtime="20210917 10:16:01.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{VirtualLink_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.964" level="INFO">@{VirtualLink_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.963" endtime="20210917 10:16:01.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{CP_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.965" level="INFO">@{CP_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.964" endtime="20210917 10:16:01.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{Storage_labels}</var>
</assign>
<msg timestamp="20210917 10:16:01.966" level="INFO">@{Storage_labels} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:01.966" endtime="20210917 10:16:01.966"></status>
</kw>
<kw name="${key} IN [ @{node_types.keys()} ]" type="for">
<kw name="${key} = tst010.vnf.simple" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${node_types['${key}']['derived_from']}</arg>
</arguments>
<assign>
<var>${node_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.969" level="INFO">${node_type} = tosca.nodes.nfv.VNF</msg>
<status status="PASS" starttime="20210917 10:16:01.968" endtime="20210917 10:16:01.969"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${is_VNF}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${node_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.970" endtime="20210917 10:16:01.971"></status>
</kw>
<msg timestamp="20210917 10:16:01.971" level="INFO">${is_VNF} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.969" endtime="20210917 10:16:01.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${is_VNF}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
<arg>${key}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.974" level="INFO">${tosca_type_derived_from_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:16:01.973" endtime="20210917 10:16:01.974"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.972" endtime="20210917 10:16:01.974"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.967" endtime="20210917 10:16:01.974"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.967" endtime="20210917 10:16:01.975"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should not be empty</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<assign>
<var>${derived_type_is_used}</var>
</assign>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.976" level="INFO">Length is 17</msg>
<status status="PASS" starttime="20210917 10:16:01.976" endtime="20210917 10:16:01.977"></status>
</kw>
<msg timestamp="20210917 10:16:01.977" level="INFO">${derived_type_is_used} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.975" endtime="20210917 10:16:01.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${derived_type_is_used}</arg>
<arg>Set Global Variable</arg>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${tosca_type_VNF}</arg>
<arg>${tosca_type_derived_from_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.980" level="INFO">${tosca_type_VNF} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:16:01.979" endtime="20210917 10:16:01.980"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.978" endtime="20210917 10:16:01.981"></status>
</kw>
<kw name="${key} IN [ @{topology_template.node_templates.keys()} ]" type="for">
<kw name="${key} = right" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:01.983" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:16:01.983" endtime="20210917 10:16:01.984"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.985" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:16:01.985" endtime="20210917 10:16:01.985"></status>
</kw>
<msg timestamp="20210917 10:16:01.986" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.984" endtime="20210917 10:16:01.986"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.988" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:16:01.987" endtime="20210917 10:16:01.988"></status>
</kw>
<msg timestamp="20210917 10:16:01.988" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.986" endtime="20210917 10:16:01.988"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.990" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:01.989" endtime="20210917 10:16:01.990"></status>
</kw>
<msg timestamp="20210917 10:16:01.991" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.989" endtime="20210917 10:16:01.991"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.992" endtime="20210917 10:16:01.993"></status>
</kw>
<msg timestamp="20210917 10:16:01.993" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:01.991" endtime="20210917 10:16:01.994"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:16:01.997" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:16:01.996" endtime="20210917 10:16:01.997"></status>
</kw>
<msg timestamp="20210917 10:16:01.997" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:01.995" endtime="20210917 10:16:01.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.998" endtime="20210917 10:16:01.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.998" endtime="20210917 10:16:01.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:01.999" endtime="20210917 10:16:02.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.000" endtime="20210917 10:16:02.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.002" endtime="20210917 10:16:02.003"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.001" endtime="20210917 10:16:02.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.004" endtime="20210917 10:16:02.004"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.982" endtime="20210917 10:16:02.004"></status>
</kw>
<kw name="${key} = management" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:02.006" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:16:02.005" endtime="20210917 10:16:02.006"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.007" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:16:02.007" endtime="20210917 10:16:02.008"></status>
</kw>
<msg timestamp="20210917 10:16:02.008" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.006" endtime="20210917 10:16:02.008"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.009" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:16:02.009" endtime="20210917 10:16:02.009"></status>
</kw>
<msg timestamp="20210917 10:16:02.010" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.008" endtime="20210917 10:16:02.011"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.012" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:02.012" endtime="20210917 10:16:02.013"></status>
</kw>
<msg timestamp="20210917 10:16:02.013" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.011" endtime="20210917 10:16:02.013"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.014" endtime="20210917 10:16:02.015"></status>
</kw>
<msg timestamp="20210917 10:16:02.015" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:02.013" endtime="20210917 10:16:02.015"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.018" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:16:02.017" endtime="20210917 10:16:02.019"></status>
</kw>
<msg timestamp="20210917 10:16:02.019" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.016" endtime="20210917 10:16:02.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.020" endtime="20210917 10:16:02.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.022" endtime="20210917 10:16:02.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.024" endtime="20210917 10:16:02.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.026" endtime="20210917 10:16:02.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.028" endtime="20210917 10:16:02.029"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.028" endtime="20210917 10:16:02.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.029" endtime="20210917 10:16:02.030"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.005" endtime="20210917 10:16:02.030"></status>
</kw>
<kw name="${key} = left" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:02.031" level="INFO">${key_type} = tosca.nodes.nfv.VduCp</msg>
<status status="PASS" starttime="20210917 10:16:02.030" endtime="20210917 10:16:02.031"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.032" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:16:02.032" endtime="20210917 10:16:02.033"></status>
</kw>
<msg timestamp="20210917 10:16:02.033" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.032" endtime="20210917 10:16:02.033"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.035" level="FAIL">tosca.nodes.nfv.VduCp != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:16:02.034" endtime="20210917 10:16:02.035"></status>
</kw>
<msg timestamp="20210917 10:16:02.035" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.034" endtime="20210917 10:16:02.035"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.036" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:02.036" endtime="20210917 10:16:02.037"></status>
</kw>
<msg timestamp="20210917 10:16:02.037" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.035" endtime="20210917 10:16:02.037"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.038" endtime="20210917 10:16:02.038"></status>
</kw>
<msg timestamp="20210917 10:16:02.038" level="INFO">${VDUcp_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:02.037" endtime="20210917 10:16:02.039"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.040" level="FAIL">tosca.nodes.nfv.VduCp != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:16:02.039" endtime="20210917 10:16:02.040"></status>
</kw>
<msg timestamp="20210917 10:16:02.041" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.039" endtime="20210917 10:16:02.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.042" endtime="20210917 10:16:02.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.043" endtime="20210917 10:16:02.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.044" endtime="20210917 10:16:02.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.046" endtime="20210917 10:16:02.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.047" endtime="20210917 10:16:02.048"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.047" endtime="20210917 10:16:02.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.049" endtime="20210917 10:16:02.049"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.030" endtime="20210917 10:16:02.049"></status>
</kw>
<kw name="${key} = vdu-b-1-vsd" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:02.051" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="PASS" starttime="20210917 10:16:02.050" endtime="20210917 10:16:02.051"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.053" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:16:02.052" endtime="20210917 10:16:02.053"></status>
</kw>
<msg timestamp="20210917 10:16:02.053" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.052" endtime="20210917 10:16:02.054"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.056" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:16:02.055" endtime="20210917 10:16:02.056"></status>
</kw>
<msg timestamp="20210917 10:16:02.056" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.054" endtime="20210917 10:16:02.057"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.058" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:02.058" endtime="20210917 10:16:02.058"></status>
</kw>
<msg timestamp="20210917 10:16:02.059" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.057" endtime="20210917 10:16:02.059"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.061" level="FAIL">tosca.nodes.nfv.Vdu.VirtualBlockStorage != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:16:02.061" endtime="20210917 10:16:02.061"></status>
</kw>
<msg timestamp="20210917 10:16:02.062" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.060" endtime="20210917 10:16:02.062"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.063" endtime="20210917 10:16:02.063"></status>
</kw>
<msg timestamp="20210917 10:16:02.063" level="INFO">${Storage_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:02.063" endtime="20210917 10:16:02.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.064" endtime="20210917 10:16:02.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.065" endtime="20210917 10:16:02.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.065" endtime="20210917 10:16:02.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.066" endtime="20210917 10:16:02.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.067" endtime="20210917 10:16:02.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.068" endtime="20210917 10:16:02.068"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.067" endtime="20210917 10:16:02.068"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.050" endtime="20210917 10:16:02.068"></status>
</kw>
<kw name="${key} = VDU-B" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:02.069" level="INFO">${key_type} = tosca.nodes.nfv.Vdu.Compute</msg>
<status status="PASS" starttime="20210917 10:16:02.069" endtime="20210917 10:16:02.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.071" endtime="20210917 10:16:02.071"></status>
</kw>
<msg timestamp="20210917 10:16:02.072" level="INFO">${VDU_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:02.070" endtime="20210917 10:16:02.072"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.074" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tst010.vnf.simple</msg>
<status status="FAIL" starttime="20210917 10:16:02.073" endtime="20210917 10:16:02.074"></status>
</kw>
<msg timestamp="20210917 10:16:02.075" level="INFO">${VNF_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.072" endtime="20210917 10:16:02.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.077" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:02.076" endtime="20210917 10:16:02.078"></status>
</kw>
<msg timestamp="20210917 10:16:02.078" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.075" endtime="20210917 10:16:02.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.081" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:16:02.080" endtime="20210917 10:16:02.081"></status>
</kw>
<msg timestamp="20210917 10:16:02.082" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.080" endtime="20210917 10:16:02.082"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.083" level="FAIL">tosca.nodes.nfv.Vdu.Compute != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:16:02.083" endtime="20210917 10:16:02.084"></status>
</kw>
<msg timestamp="20210917 10:16:02.084" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.082" endtime="20210917 10:16:02.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.085" endtime="20210917 10:16:02.085"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.085" endtime="20210917 10:16:02.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.086" endtime="20210917 10:16:02.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.086" endtime="20210917 10:16:02.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.088" endtime="20210917 10:16:02.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.090" endtime="20210917 10:16:02.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.091" endtime="20210917 10:16:02.092"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.069" endtime="20210917 10:16:02.092"></status>
</kw>
<kw name="${key} = vnf-b-1_VNF" type="foritem">
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${key}'].type}</arg>
</arguments>
<assign>
<var>${key_type}</var>
</assign>
<msg timestamp="20210917 10:16:02.093" level="INFO">${key_type} = tst010.vnf.simple</msg>
<status status="PASS" starttime="20210917 10:16:02.092" endtime="20210917 10:16:02.093"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<assign>
<var>${VDU_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_compute}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.094" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.Compute</msg>
<status status="FAIL" starttime="20210917 10:16:02.093" endtime="20210917 10:16:02.094"></status>
</kw>
<msg timestamp="20210917 10:16:02.094" level="INFO">${VDU_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.093" endtime="20210917 10:16:02.094"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<assign>
<var>${VNF_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VNF}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.095" endtime="20210917 10:16:02.096"></status>
</kw>
<msg timestamp="20210917 10:16:02.096" level="INFO">${VNF_check} = True</msg>
<status status="PASS" starttime="20210917 10:16:02.095" endtime="20210917 10:16:02.096"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<assign>
<var>${Link_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_virtual_link}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.098" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VnfVirtualLink</msg>
<status status="FAIL" starttime="20210917 10:16:02.097" endtime="20210917 10:16:02.098"></status>
</kw>
<msg timestamp="20210917 10:16:02.098" level="INFO">${Link_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.096" endtime="20210917 10:16:02.100"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<assign>
<var>${VDUcp_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_VDU_cp}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.102" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.VduCp</msg>
<status status="FAIL" starttime="20210917 10:16:02.100" endtime="20210917 10:16:02.102"></status>
</kw>
<msg timestamp="20210917 10:16:02.102" level="INFO">${VDUcp_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.100" endtime="20210917 10:16:02.103"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<assign>
<var>${Storage_check}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${key_type}</arg>
<arg>${tosca_type_storage}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.105" level="FAIL">tst010.vnf.simple != tosca.nodes.nfv.Vdu.VirtualBlockStorage</msg>
<status status="FAIL" starttime="20210917 10:16:02.104" endtime="20210917 10:16:02.105"></status>
</kw>
<msg timestamp="20210917 10:16:02.105" level="INFO">${Storage_check} = False</msg>
<status status="PASS" starttime="20210917 10:16:02.103" endtime="20210917 10:16:02.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDU_check}</arg>
<arg>Append To List</arg>
<arg>${VDU_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.106" endtime="20210917 10:16:02.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Append To List</arg>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${VNF_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.108" endtime="20210917 10:16:02.109"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.107" endtime="20210917 10:16:02.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VNF_check}</arg>
<arg>Get VNF Attributes from SOL001</arg>
<arg>${key}</arg>
</arguments>
<kw name="Get VNF Attributes from SOL001">
<arguments>
<arg>${key}</arg>
</arguments>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_id}</arg>
</arguments>
<assign>
<var>${descriptor_id}</var>
</assign>
<msg timestamp="20210917 10:16:02.113" level="INFO">${descriptor_id} = VNF-B</msg>
<status status="PASS" starttime="20210917 10:16:02.111" endtime="20210917 10:16:02.113"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.provider}</arg>
</arguments>
<assign>
<var>${provider}</var>
</assign>
<msg timestamp="20210917 10:16:02.115" level="INFO">${provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:16:02.113" endtime="20210917 10:16:02.115"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.product_name}</arg>
</arguments>
<assign>
<var>${product_name}</var>
</assign>
<msg timestamp="20210917 10:16:02.117" level="INFO">${product_name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 10:16:02.116" endtime="20210917 10:16:02.118"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.software_version}</arg>
</arguments>
<assign>
<var>${software_version}</var>
</assign>
<msg timestamp="20210917 10:16:02.120" level="INFO">${software_version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:16:02.119" endtime="20210917 10:16:02.120"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${topology_template.node_templates['${VNF_label}'].properties.descriptor_version}</arg>
</arguments>
<assign>
<var>${descriptor_version}</var>
</assign>
<msg timestamp="20210917 10:16:02.122" level="INFO">${descriptor_version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:16:02.121" endtime="20210917 10:16:02.122"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${descriptor_id}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.124" level="INFO">${Descriptor_ID} = VNF-B</msg>
<status status="PASS" starttime="20210917 10:16:02.123" endtime="20210917 10:16:02.124"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Provider}</arg>
<arg>${provider}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.126" level="INFO">${Provider} = ETSI TST WG</msg>
<status status="PASS" starttime="20210917 10:16:02.125" endtime="20210917 10:16:02.126"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${product_name}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.128" level="INFO">${Product_Name} = VDU_VNF-B</msg>
<status status="PASS" starttime="20210917 10:16:02.127" endtime="20210917 10:16:02.128"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${software_version}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.130" level="INFO">${Software_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:16:02.129" endtime="20210917 10:16:02.130"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Descriptor_Version}</arg>
<arg>${descriptor_version}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.131" level="INFO">${Descriptor_Version} = 2.0</msg>
<status status="PASS" starttime="20210917 10:16:02.131" endtime="20210917 10:16:02.131"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.110" endtime="20210917 10:16:02.132"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.110" endtime="20210917 10:16:02.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Link_check}</arg>
<arg>Append To List</arg>
<arg>${VirtualLink_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.132" endtime="20210917 10:16:02.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${VDUcp_check}</arg>
<arg>Append To List</arg>
<arg>${CP_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.133" endtime="20210917 10:16:02.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${Storage_check}</arg>
<arg>Append To List</arg>
<arg>${Storage_labels}</arg>
<arg>${key}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.134" endtime="20210917 10:16:02.135"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.092" endtime="20210917 10:16:02.135"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.981" endtime="20210917 10:16:02.135"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VDU_IDs}</arg>
<arg>@{VDU_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.137" level="INFO">@{VDU_IDs} = [ VDU-B ]</msg>
<status status="PASS" starttime="20210917 10:16:02.136" endtime="20210917 10:16:02.138"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VNF_IDs}</arg>
<arg>@{VNF_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.139" level="INFO">@{VNF_IDs} = [ vnf-b-1_VNF ]</msg>
<status status="PASS" starttime="20210917 10:16:02.138" endtime="20210917 10:16:02.139"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{VirtualLink_IDs}</arg>
<arg>@{VirtualLink_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.140" level="INFO">@{VirtualLink_IDs} = [ ]</msg>
<status status="PASS" starttime="20210917 10:16:02.139" endtime="20210917 10:16:02.140"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{CP_IDs}</arg>
<arg>@{CP_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.141" level="INFO">@{CP_IDs} = [ right | management | left ]</msg>
<status status="PASS" starttime="20210917 10:16:02.141" endtime="20210917 10:16:02.142"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Storage_IDs}</arg>
<arg>@{Storage_labels}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.143" level="INFO">@{Storage_IDs} = [ vdu-b-1-vsd ]</msg>
<status status="PASS" starttime="20210917 10:16:02.142" endtime="20210917 10:16:02.144"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.961" endtime="20210917 10:16:02.144"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.960" endtime="20210917 10:16:02.144"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:01.959" endtime="20210917 10:16:02.145"></status>
</kw>
<doc>Test ID: 1.1.1
Test title: PARSE the descriptor file correctly
Test objective: The objective is to check if the SOL001 descriptor file is parsed correctly.
Pre-condition: SOL001 or SOL006 descriptor YAML file is available.
Post-condition: Values from the descriptor files are stored in suite variables.</doc>
<status status="PASS" starttime="20210917 10:16:01.958" endtime="20210917 10:16:02.145" critical="yes"></status>
</test>
<test id="s1-s1-s2-t2" name="Match the Response attributes with parsed data SOL006">
<kw name="Match the Response Attributes with Descriptors SOL006">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_VNFId}</arg>
</arguments>
<msg timestamp="20210917 10:16:02.148" level="FAIL">VNF-B != VNF-B-2vdu</msg>
<status status="FAIL" starttime="20210917 10:16:02.148" endtime="20210917 10:16:02.149"></status>
</kw>
<status status="FAIL" starttime="20210917 10:16:02.147" endtime="20210917 10:16:02.149"></status>
</kw>
<doc>Test ID: 1.1.2
Test title: Match the Response attributes with parsed data SOL006
Test objective: The objective is to check if the Response body attributes match with the information in SOL006 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="FAIL" starttime="20210917 10:16:02.146" endtime="20210917 10:16:02.150" critical="yes">VNF-B != VNF-B-2vdu</status>
</test>
<test id="s1-s1-s2-t3" name="Match the Response attributes with parsed data SOL001">
<kw name="Match the Response Attributes with Descriptors SOL001">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Descriptor_ID}</arg>
<arg>${Response_vnfd_id_SOL1}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.151" endtime="20210917 10:16:02.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Product_Name}</arg>
<arg>${Response_ProductNameS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.152" endtime="20210917 10:16:02.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Software_Version}</arg>
<arg>${Response_SoftwareVersionS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.154" endtime="20210917 10:16:02.154"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${VDU_IDs}</arg>
<arg>${Response_vduIdS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.155" endtime="20210917 10:16:02.155"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${CP_IDs}</arg>
<arg>${Response_extCPS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.156" endtime="20210917 10:16:02.156"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${Storage_IDs}</arg>
<arg>${Response_StorageS001}</arg>
</arguments>
<status status="PASS" starttime="20210917 10:16:02.156" endtime="20210917 10:16:02.157"></status>
</kw>
<status status="PASS" starttime="20210917 10:16:02.151" endtime="20210917 10:16:02.157"></status>
</kw>
<doc>Test ID: 1.1.3
Test title: Match the Response attributes with parsed data SOL001
Test objective: The objective is to check if the Response body attributes match with the information in SOL001 descriptor file.
Pre-condition: Either SOL001 or SOL006 descriptor YAML file has been parsed.
Post-condition:</doc>
<status status="PASS" starttime="20210917 10:16:02.151" endtime="20210917 10:16:02.158" critical="yes"></status>
</test>
<status status="FAIL" starttime="20210917 10:16:01.883" endtime="20210917 10:16:02.158"></status>
</suite>
<status status="FAIL" starttime="20210917 10:16:01.574" endtime="20210917 10:16:02.161"></status>
</suite>
<status status="FAIL" starttime="20210917 10:16:01.523" endtime="20210917 10:16:02.164"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="3">Critical Tests</stat>
<stat pass="4" fail="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="4" fail="3" id="s1" name="NFVDescriptorParsing">NFVDescriptorParsing</stat>
<stat pass="4" fail="3" id="s1-s1" name="DescriptorParser">NFVDescriptorParsing.DescriptorParser</stat>
<stat pass="2" fail="2" id="s1-s1-s1" name="NSDParserTesting">NFVDescriptorParsing.DescriptorParser.NSDParserTesting</stat>
<stat pass="2" fail="1" id="s1-s1-s2" name="ParserTesting">NFVDescriptorParsing.DescriptorParser.ParserTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
